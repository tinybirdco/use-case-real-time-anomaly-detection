DESCRIPTION >
	Named 'simple' since this does not make 10-second aggregations. 

This implements a simple algorith based on a time-series average and standard deviation over a minute-scale window of data. Each incoming data point, x, has a Z-Score calculated in this way:  

`zscore = (x - avg) / stddev`

Currently, this Pipe is based on two time windows: 
First, the statistics are calculated across the `_stats_time_window_minutes`.
Second, anomalies are scanned for using the `_anomaly_scan_time_window_seconds` window.

These parameters, along with the `_zscore_outlier_multiplier` setting, could be promoted to API Endpoint query parameters.


TOKEN "simple_z_score_read" READ

NODE calculate_zscore
DESCRIPTION >
    Promote these to endpoint query parameters?

SQL >

    %
    {% set _stats_time_window_minutes=10 %}
    {% set _anomaly_scan_time_window_seconds=30 %}
    {% set _zscore_outlier_multiplier=2 %}

    WITH stats AS (
        SELECT id,
            avg(value) AS average,
            stddevPop(value) AS stddev
        FROM incoming_data
        WHERE timestamp between now() - interval {{Int16(_stats_time_window_minutes)}} minute and now()
           {% if defined(sensor_id) %}               
              AND id = {{ Int32(sensor_id)}}
           {% end %}  
        GROUP BY id  
    )
    SELECT i.timestamp, 
         i.id, 
         i.value, 
         (i.value - stats.average)/stats.stddev AS zscore,
         stats.average,
         stats.stddev,
         {{Int16(_zscore_outlier_multiplier)}} AS zscore_multiplier
    FROM incoming_data i
    JOIN stats s ON s.id = i.id
    WHERE timestamp BETWEEN now() - interval {{Int16(_anomaly_scan_time_window_seconds)}} second AND now()
    ORDER BY timestamp desc



NODE endpoint
SQL >

    %
    SELECT timestamp,
       id,
       value,
       Round(zscore,2) AS zscore,
       multiIf(zscore < (-1 * zscore_multiplier), 'low', zscore > zscore_multiplier, 'high','ok') AS test,
       Round(average,2),
       stddev,
       zscore_multiplier
    FROM calculate_zscore
    WHERE test = 'low' OR test = 'high' 
     AND zscore < -1 * zscore_multiplier OR zscore > zscore_multiplier 
    ORDER by timestamp DESC



