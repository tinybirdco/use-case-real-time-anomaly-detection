DESCRIPTION >
	Calculates the rate-of-change, or slope, between the most recent data point and the previous points.

This relies on the ClickHouse `lagInFrame` function.

Key detail seems to be in this window function detail:
`(PARTITION BY id ORDER BY timestamp ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) `


NODE calculating_slope
DESCRIPTION >
    Calculates the slope between the most recent data and the previous data.

SQL >

    %

    SELECT id, 
    timestamp, 
    previous_timestamp,
    (value - previous_value) / (timestamp - previous_timestamp) as slope,
    value, 
    previous_value,
    (value - previous_value) as value_diff,
    (timestamp - previous_timestamp) as time_diff,
    3 as max_slope,
    lagInFrame(timestamp, 1) OVER 
    (PARTITION BY id ORDER BY timestamp ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS previous_timestamp, 
    lagInFrame(value, 1) 
    OVER (PARTITION BY id ORDER BY timestamp ASC ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS previous_value,
    3 as max_slope
    FROM incoming_data
    WHERE timestamp > now() - interval 30 minute
      {% if defined(sensor_id) %}               
        AND id = {{ Int32(sensor_id)}}
      {% end %}    
    ORDER BY timestamp DESC




NODE log
DESCRIPTION >
    Select rate-of-changes/slopes above the max.

SQL >

    SELECT id, 
      timestamp, 
      value,
      'rate-of-change' AS anomaly_type,
      concat('slope:', toString(ROUND(slope,2)), '| max_slope:', toString(max_slope), '| value_diff: ', toString(ROUND(value_diff,2))) AS note
    FROM calculating_slope
    WHERE ABS(slope) > max_slope
    ORDER BY timestamp DESC

TYPE materialized
DATASOURCE log_mv


