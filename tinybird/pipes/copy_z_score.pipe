DESCRIPTION >
	This Copy Pipe test for `Z-score` anomalies across all sensors and write output to the `copy_log` Data Source. These Copy Pipes do the work of compiling their detections into a single place.

These Copy Pipes do not support query parameters so some details are hardcoded in the SQL. For example, this Copy Pipe hardcodes that the Z-Score multiplier to `2`, generates averages and standard deviations status on a moving `10`-minute window, and tests data recieved in the last `60` seconds.  This last one was 'tuned' to match the interval that the Copy Pipe is triggered. 

Based on the z_score Pipe. This implements a simple algorith based on a time-series average and standard deviation over a minute-scale window of data. Each incoming data point, x, has a Z-Score calculated in this way:  

`zscore = (x - avg) / stddev`


TOKEN "scheduled_copy_z_score" READ

NODE calculate_zscore
DESCRIPTION >
    Promote these to endpoint query parameters?

SQL >

    %
    {% set _zscore_multipler=2 %}  # A multipler used to determine Z-score outliers. 
    {% set _stats_window_minutes=10 %}  # Statistical quartiles are based on this most recent window.
    {% set _detect_window_seconds=61 %} # This Pipe makes a copy every minute, so selecting events since last copy plus one minute.  

    WITH stats AS (
        SELECT id,
            avg(value) AS average,
            stddevPop(value) AS std_dev
        FROM incoming_data
        WHERE timestamp BETWEEN NOW() - INTERVAL {{_stats_window_minutes}} MINUTE AND NOW()
        GROUP BY id  
    )
    SELECT i.timestamp, 
         i.id, 
         i.value, 
         (i.value - stats.average)/stats.std_dev AS zscore,
         ROUND(stats.average,2) AS average,
         ROUND(stats.std_dev,2) AS std_dev,
         {{_zscore_multipler}} AS zscore_multiplier
    FROM incoming_data i
    JOIN stats s ON s.id = i.id
    WHERE timestamp BETWEEN NOW() - INTERVAL {{_detect_window_seconds}} SECOND AND NOW()
    ORDER BY timestamp DESC



NODE log
SQL >

    SELECT id,
       timestamp,
       value,
       'z-score' AS anomaly_type,
       concat('z-score: ',  substring(toString(zscore),1,6), ' | ', multiIf(zscore < (-1 * zscore_multiplier), 'low', zscore > zscore_multiplier, 'high','ok'),' | average: ', toString(average),' | std_dev: ', toString(std_dev)) AS note
    FROM calculate_zscore
    WHERE zscore < (-1 * zscore_multiplier) OR zscore > zscore_multiplier 
    ORDER BY timestamp DESC

TYPE copy
TARGET_DATASOURCE copy_log_duplicates
COPY_SCHEDULE * * * * *


